*урок 2
классическое МVC в Yii2 
тонкий контроллер,толстая модель
M - ActiveRecord
V - views
c - SiteController extends Controller
---------------
другой шаблон проектирования:
GRASP
V - view,form,widget
C - $_POST -> Form -> validate() -> signup() -> redirect() (это всего лишь посредник-контроллер)
M - cущности (Пользователи,Товары,Категории и т.д.),сервисы
Модель магазина - 1 модель ядро
Модели данных из таблицы Users
Модель формы / Модель ввода (SignupForm extends FormModel) REST API, HTML
----------
вместо 1 папки models
-common
--entities
---User.php (namespace common/entities)
--forms
---LoginForm.php
---------------------------
SiteController.php
public function actionCheckout(){

	... $user = $this->findUser($user_id);
	... $cart = $this->findCart($user_id);
	... $order = new Order($form->name);
	... Yii::$app->db->transaction(function{
		$order->save();
		$user->save(),
		$cart->clear()
	});
}

// в папке services создаем класс,этот метод checkout() больше не придется дублировать при REST API,для него удобно писать тест,
и можно использовать где угодно (backend,frontend)
-frontend
--services
---OrderService.php

namespace frontend\services\

use common\entities\User

class OrderService{
	public function checout(){

	... $user = $this->findUser($user_id);
	... $cart = $this->findCart($user_id);
	... $order = new Order($form->name);
	... Yii::$app->db->transaction(function{
		$order->save();
		$user->save(),
		$cart->clear()
	});
	}
}

-------------------------------
Обязанность контроллера заключается в получении запроса от пользователя и отправке пользователю результатов. Контроллер не должен содержать никакой бизнес логики, иначе ее будет невозможно использовать повторно, что приведет к дублированию кода. Также это добавит сложностей при изменении типа ответа контроллера, к примеру для API. Если в контроллере нет ничего лишнего, то поменять формат вывода с отображения view на ответ API не составит никакого труда.

Контроллер должен быть простой. Все, что он должен делать — это получать запрос и отдавать ответ. Например, такой:
Куда же деть все остальное? В более низкие слои.
